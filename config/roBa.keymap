#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 ESCAPE>;
            key-positions = <0 1>;
        };

        double_quotation {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        toten {
            bindings = <&kp COMMA>;
            key-positions = <32 33>;
            layers = <0>;
        };

        desktop {
            bindings = <&kp LC(LEFT)>;
            key-positions = <16 17>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W             &kp E    &kp R                   &kp T                                                        &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S             &kp D    &kp F                   &kp G        &kp LG(Z)                        &kp DELETE     &kp H        &kp J  &kp K      &kp L    &mt LEFT_COMMAND MINUS
&mt LEFT_SHIFT X  &kp Z             &kp C    &kp V                   &kp B        &kp SEMICOLON                    &kp COLON      &kp N        &kp M  &kp COMMA  &kp DOT  &kp LEFT_ALT
&kp X             &kp LEFT_COMMAND  &kp TAB  &lt_to_layer_0 6 LANG2  &lt 2 SPACE  &lt_to_layer_0 3 LANGUAGE_1      &kp BACKSPACE  &lt 1 ENTER                             &kp LEFT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans               &trans                       &kp F1            &kp F2           &kp F3        &kp F4      &kp F5
&trans  &trans  &trans  &trans               &trans  &trans      &kp F13  &kp F6            &kp F7           &kp F8        &kp F9      &kp F10
&trans  &trans  &trans  &trans               &trans  &trans      &trans   &kp K_PLAY_PAUSE  &kp C_VOLUME_UP  &kp C_VOL_DN  &kp K_MUTE  &kp F11
&trans  &trans  &trans  &kp INTERNATIONAL_1  &trans  &trans      &trans   &trans                                                       &kp F12
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                      &kp AT            &kp AMPERSAND      &kp HASH              &kp LEFT_BRACE         &kp RIGHT_BRACE
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE     &kp TILDE         &kp QUESTION       &kp EXCL              &kp DOLLAR             &kp LEFT_COMMAND
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &kp PIPE           &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_ALT
&trans                      &trans           &kp KP_NUMBER_0  &trans           &trans        &trans                       &kp DOUBLE_QUOTES  &kp PERCENT                                                                       &kp LEFT_CONTROL
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW      &kp LC(TAB)              &trans                         &trans            &trans    &kp UP_ARROW    &trans     &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW    &kp RIGHT_ARROW          &kp END  &trans      &kp HOME  &kp LG(UP_ARROW)  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &kp LEFT_COMMAND
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &kp LG(UP_ARROW)  &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &kp END   &kp LG(DOWN)      &trans    &trans          &trans     &kp LEFT_ALT
&trans          &trans                  &kp LG(DOWN)      &trans                   &trans   &trans      &trans    &trans                                                 &kp LEFT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                             &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2          &bt BT_SEL 3              &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans         &trans            &kp BACKSPACE      &kp LA(LS(NUMBER_3))  &kp B                     &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &kp LG(LA(V))  &kp LC(LG(LEFT))  &kp LG(LC(RIGHT))  &kp LA(LG(AT_SIGN))   &kp LA(LG(LEFT_BRACKET))  &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans         &kp KP_NUMBER_3                                                                      &bt BT_CLR_ALL
            >;
        };
    };
};
